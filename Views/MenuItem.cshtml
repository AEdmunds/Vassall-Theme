@{
    // odd formatting in this file is to cause more attractive results in the output.
    var items = Enumerable.Cast<dynamic>((System.Collections.IEnumerable)Model);
}
@{
    if (!HasText(Model.Text)) {
        @DisplayChildren(Model)
    }
    else {
        string requestUrl = Request.Path.ToUpperInvariant();
        string modelUrl = Model.Href.ToUpperInvariant();
        if (requestUrl == modelUrl || (!string.IsNullOrEmpty(modelUrl) && requestUrl.StartsWith(modelUrl + "/"))) {
            Model.Classes.Add("active");
        }

        if (items.Any()) {
            Model.Classes.Add("dropdown");
        }

        string borderColor = "";
        string accessKey = "";
        if (Model.Content.ContentItem.ContentType == "ContentMenuItem")
        {
            borderColor = Model.Content.ContentItem.ContentMenuItem.BorderColour.Value;
            accessKey = Model.Content.ContentItem.ContentMenuItem.AccessKey.Value;    
        }
        if (Model.Content.ContentItem.ContentType == "MenuItem")
        {
            borderColor = Model.Content.ContentItem.MenuItem.BorderColour.Value;
            accessKey = Model.Content.ContentItem.MenuItem.AccessKey.Value;
        }

        var id = "li-" + Model.Text.ToString().ToLower().Replace(" ", "-");
        Model.Attributes.Add("id", id);
        
        if (!string.IsNullOrEmpty(borderColor)) {
            //var style = string.Format("border-top: 2px solid {0}; border-bottom: 2px solid {0};", borderColor);
            //Model.Attributes.Add("style", style);

            var pageName = Model.Text.ToString(); 
            
            
            <style>
                li#@id {
                    border-top: 2px solid @borderColor; 
                    border-bottom: 2px solid @borderColor;
                }
                li#@id a:active {
                    background-color: @borderColor;
                    color: auto;
                }
                li#@id:hover a{
                    border-bottom: 6px solid @borderColor; 
                }
                li.active#@id a{
                    border-bottom: 6px solid @borderColor; 
                }
                
                #@pageName .text-divider7 span{
		            background-color: @borderColor;
	            } 
                
                    
            </style>
            
            
        }    
        
        var tag = Tag(Model, "li");
       
        @tag.StartElement

        @* morphing the shape to keep Model untouched*@
        Model.Metadata.Alternates.Clear();
        if (items.Any()) {
           <a class="dropdown-toggle" data-toggle="dropdown" href="#">@Model.Text&nbsp;<b class="caret"></b></a>
        }
        else {
           
        
            if (!string.IsNullOrEmpty(accessKey)) {
                //string menuText = Model.Text.ToString();
                //string replaceText;
                //string value;
                //if (menuText.StartsWith(accesskey.ToUpper())) {
                //    replaceText = string.Format("<span class=\"underline\">{0}</span>", accesskey.ToUpper());
                //    value = menuText.Replace(accesskey.ToUpper(), replaceText);               
                //}
                //else {
                //    replaceText = string.Format("<span class=\"underline\">{0}</span>", accesskey);
                //    value = menuText.Replace(accesskey, replaceText);               
                //}
                
            
                <a href="@Model.Href" accesskey="@accessKey" >@Model.Text</a>    
            }
            else {
                <a href="@Model.Href" >@Model.Text</a>    
            }
            
            
        }

       

        if (items.Any()) {
            <ul class="dropdown-menu">
                @DisplayChildren(Model)
            </ul>
        }
        @tag.EndElement
    }
}
    
        